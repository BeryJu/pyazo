{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Pyazo \u00b6 This documentation will help you to install and configure Pyazo.","title":"Home"},{"location":"#welcome-to-pyazo","text":"This documentation will help you to install and configure Pyazo.","title":"Welcome to Pyazo"},{"location":"api/api_endpoints/","text":"POST /upload \u00b6 Gyazo-compatible upload endpoint. Takes 2 parameters: Parameters: \u00b6 imagedata Raw file data id Currently unused field but required to be compatible with gyazo's API. Can be used to send a client identifier. Returns \u00b6 Returns the full URL to the uploaded file (including https://...)","title":"Endpoints"},{"location":"api/api_endpoints/#post-upload","text":"Gyazo-compatible upload endpoint. Takes 2 parameters:","title":"POST /upload"},{"location":"api/api_endpoints/#parameters","text":"imagedata Raw file data id Currently unused field but required to be compatible with gyazo's API. Can be used to send a client identifier.","title":"Parameters:"},{"location":"api/api_endpoints/#returns","text":"Returns the full URL to the uploaded file (including https://...)","title":"Returns"},{"location":"configuration/initial/","text":"Initial Configuration \u00b6 After you've installed Pyazo and created your superuser, there is some configuration needed to make Pyazo work. You can optionally enable error_report_enabled , which sends errors directly to sentry.beryju.org . If you prefer shorter links, you can adjust the setting default_return_view , which defaults to using the SHA256 of the uploaded file. The length of links is as following: Function Length sha512_short 16 md5 32 sha256 64 sha512 128","title":"Initial Configuration"},{"location":"configuration/initial/#initial-configuration","text":"After you've installed Pyazo and created your superuser, there is some configuration needed to make Pyazo work. You can optionally enable error_report_enabled , which sends errors directly to sentry.beryju.org . If you prefer shorter links, you can adjust the setting default_return_view , which defaults to using the SHA256 of the uploaded file. The length of links is as following: Function Length sha512_short 16 md5 32 sha256 64 sha512 128","title":"Initial Configuration"},{"location":"configuration/ldap/","text":"LDAP Authentication \u00b6 pyazo supports Authentication against LDAP or Active Directory. To configure LDAP, add the following environment variables to your deployment: PYAZO_LDAP__ENABLED: true PYAZO_LDAP__SERVER__URI='ldap://dc1.example.com' PYAZO_LDAP__SERVER__URI: false PYAZO_LDAP__BIND__DN: '' PYAZO_LDAP__BIND__PASSWORD: '' PYAZO_LDAP__SEARCH_BASE: '' PYAZO_LDAP__FILTER: '(sAMAccountName=%(user)s)' PYAZO_LDAP__REQUIRE_GROUP: false The require_group setting is optional and can be used to specify the DN of a group the user has to be member of.","title":"LDAP"},{"location":"configuration/ldap/#ldap-authentication","text":"pyazo supports Authentication against LDAP or Active Directory. To configure LDAP, add the following environment variables to your deployment: PYAZO_LDAP__ENABLED: true PYAZO_LDAP__SERVER__URI='ldap://dc1.example.com' PYAZO_LDAP__SERVER__URI: false PYAZO_LDAP__BIND__DN: '' PYAZO_LDAP__BIND__PASSWORD: '' PYAZO_LDAP__SEARCH_BASE: '' PYAZO_LDAP__FILTER: '(sAMAccountName=%(user)s)' PYAZO_LDAP__REQUIRE_GROUP: false The require_group setting is optional and can be used to specify the DN of a group the user has to be member of.","title":"LDAP Authentication"},{"location":"configuration/migration_between_systems/","text":"Moving pyazo to a different host \u00b6 All the uploads are saved in the media/ folder (full path on debian-based systems: /usr/share/pyazo/media/ ). To migrate all your data, simply install pyazo as described in Install . Afterwards, copy all files in the media folder from the old system to the new one. Make sure filles within the folder have correct permissions (owner pyazo, group pyazo, chown 755). Afterwards run /usr/share/pyazo/pyazo.sh reindex . This will re-add all files to the database.","title":"Migration between systems"},{"location":"configuration/migration_between_systems/#moving-pyazo-to-a-different-host","text":"All the uploads are saved in the media/ folder (full path on debian-based systems: /usr/share/pyazo/media/ ). To migrate all your data, simply install pyazo as described in Install . Afterwards, copy all files in the media folder from the old system to the new one. Make sure filles within the folder have correct permissions (owner pyazo, group pyazo, chown 755). Afterwards run /usr/share/pyazo/pyazo.sh reindex . This will re-add all files to the database.","title":"Moving pyazo to a different host"},{"location":"configuration/nginx_reverse_proxy/","text":"Reverse Proxy Configuration \u00b6 To use Pyazo behind an nginx Reverse-Proxy, you can use the following configuration: server { # Server config listen 80; server_name i.domain.tld; # 301 to SSL location / { return 301 https://$host$request_uri; } } server { # Server config listen 443 ssl http2; server_name i.domain.tld; # SSL Certs ssl_certificate <ssl paths> ssl_certificate_key <ssl paths> # Disable checking of client request body size. client_max_body_size 0; # Proxy site location / { proxy_pass http://<pyazo hostname>:8000; proxy_set_header Host $host; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Port 443; proxy_set_header X-Real-IP $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-For $remote_addr; proxy_set_header REMOTE_ADDR $remote_addr; proxy_connect_timeout 10; proxy_read_timeout 90; } }","title":"Reverse Proxy"},{"location":"configuration/nginx_reverse_proxy/#reverse-proxy-configuration","text":"To use Pyazo behind an nginx Reverse-Proxy, you can use the following configuration: server { # Server config listen 80; server_name i.domain.tld; # 301 to SSL location / { return 301 https://$host$request_uri; } } server { # Server config listen 443 ssl http2; server_name i.domain.tld; # SSL Certs ssl_certificate <ssl paths> ssl_certificate_key <ssl paths> # Disable checking of client request body size. client_max_body_size 0; # Proxy site location / { proxy_pass http://<pyazo hostname>:8000; proxy_set_header Host $host; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Port 443; proxy_set_header X-Real-IP $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-For $remote_addr; proxy_set_header REMOTE_ADDR $remote_addr; proxy_connect_timeout 10; proxy_read_timeout 90; } }","title":"Reverse Proxy Configuration"},{"location":"configuration/oidc/","text":"OIDC Authentication \u00b6 pyazo supports Authentication against OIDC or Active Directory. To configure OIDC, add the following environment variables to your deployment: PYAZO_OIDC__CLIENT_ID=foo PYAZO_OIDC__CLIENT_SECRET=bar PYAZO_OIDC__AUTHORIZATION_URL=https:// PYAZO_OIDC__TOKEN_URL=bar PYAZO_OIDC__USER_URL=bar","title":"OIDC"},{"location":"configuration/oidc/#oidc-authentication","text":"pyazo supports Authentication against OIDC or Active Directory. To configure OIDC, add the following environment variables to your deployment: PYAZO_OIDC__CLIENT_ID=foo PYAZO_OIDC__CLIENT_SECRET=bar PYAZO_OIDC__AUTHORIZATION_URL=https:// PYAZO_OIDC__TOKEN_URL=bar PYAZO_OIDC__USER_URL=bar","title":"OIDC Authentication"},{"location":"install/docker/","text":"Kubernetes \u00b6 The recommended way to deploy pyazo on docker is on Kubernetes. To make installation easier, we provide a helm chart for this. To install pyazo using helm on kubernetes, run the following: helm repo add beryju.org https://pkg.beryju.org/repository/helm/ helm install beryju.org/pyazo --name pyazo --namespace pyazo -f <config file> To configure it, you can use a config as following: postgresql: postgresqlPassword: \"<password>\" persistence: storageClass: standard redis: password: \"<password>\" master: persistence: enabled: false persistence: storageClass: standard ingress: enabled: true annotations: kubernetes.io/ingress.class: nginx certmanager.k8s.io/cluster-issuer: letsencrypt-prod kubernetes.io/tls-acme: \"true\" nginx.ingress.kubernetes.io/ssl-redirect: \"true\" tls: - secretName: letsencrypt-prod hosts: - <url> hosts: - <url> defaultHost: <url> To see all possible settings you can change, refer to https://git.beryju.org/BeryJu.org/pyazo/blob/master/helm/pyazo/values.yaml Pure Docker \u00b6 Pyazo can be run on pure docker. The image is docker.pkg.beryju.org/pyazo . The image needs to be run twice, once for the webserver and once for the background worker. The config file needs to be mounted under /etc/pyazo/config.yml . Uploaded files are saved under /app/media , which should be mounted as well. The webserver can be started by running manage.py web in the Container. The process will listen on port 8000 for incoming connections. The background-worker can be started by running manage.py worker .","title":"Docker / Kubernetes"},{"location":"install/docker/#kubernetes","text":"The recommended way to deploy pyazo on docker is on Kubernetes. To make installation easier, we provide a helm chart for this. To install pyazo using helm on kubernetes, run the following: helm repo add beryju.org https://pkg.beryju.org/repository/helm/ helm install beryju.org/pyazo --name pyazo --namespace pyazo -f <config file> To configure it, you can use a config as following: postgresql: postgresqlPassword: \"<password>\" persistence: storageClass: standard redis: password: \"<password>\" master: persistence: enabled: false persistence: storageClass: standard ingress: enabled: true annotations: kubernetes.io/ingress.class: nginx certmanager.k8s.io/cluster-issuer: letsencrypt-prod kubernetes.io/tls-acme: \"true\" nginx.ingress.kubernetes.io/ssl-redirect: \"true\" tls: - secretName: letsencrypt-prod hosts: - <url> hosts: - <url> defaultHost: <url> To see all possible settings you can change, refer to https://git.beryju.org/BeryJu.org/pyazo/blob/master/helm/pyazo/values.yaml","title":"Kubernetes"},{"location":"install/docker/#pure-docker","text":"Pyazo can be run on pure docker. The image is docker.pkg.beryju.org/pyazo . The image needs to be run twice, once for the webserver and once for the background worker. The config file needs to be mounted under /etc/pyazo/config.yml . Uploaded files are saved under /app/media , which should be mounted as well. The webserver can be started by running manage.py web in the Container. The process will listen on port 8000 for incoming connections. The background-worker can be started by running manage.py worker .","title":"Pure Docker"},{"location":"install/package/","text":"Installation \u00b6 pyazo is a python-based application which requires Python 3.5 or newer. The following services are also a requirement: MySQL/MariaDB Redis By default, APT will install these services on the same server as pyazo is on. This can be omitted by running apt with --no-install-recommends . Add the repository \u00b6 Run the following commands to add the pkg.beryju.org Apt-Repository. wget -O - -q https://pkg.beryju.org/repository/raw-utils/apt/public.key | apt-key add - echo \"deb https://pkg.beryju.org/repository/apt/ beryjuorg main\" >> /etc/apt/sources.list apt update After the commands finish, you can install the package for the python version shown above: apt install pyazo Create a superuser \u00b6 After the installation is done, you should create a superuser to access the Web-Interface. Execute the following command to create a User with Administrative rights: /usr/share/pyazo/pyazo.sh createsuperuser","title":"Package"},{"location":"install/package/#installation","text":"pyazo is a python-based application which requires Python 3.5 or newer. The following services are also a requirement: MySQL/MariaDB Redis By default, APT will install these services on the same server as pyazo is on. This can be omitted by running apt with --no-install-recommends .","title":"Installation"},{"location":"install/package/#add-the-repository","text":"Run the following commands to add the pkg.beryju.org Apt-Repository. wget -O - -q https://pkg.beryju.org/repository/raw-utils/apt/public.key | apt-key add - echo \"deb https://pkg.beryju.org/repository/apt/ beryjuorg main\" >> /etc/apt/sources.list apt update After the commands finish, you can install the package for the python version shown above: apt install pyazo","title":"Add the repository"},{"location":"install/package/#create-a-superuser","text":"After the installation is done, you should create a superuser to access the Web-Interface. Execute the following command to create a User with Administrative rights: /usr/share/pyazo/pyazo.sh createsuperuser","title":"Create a superuser"}]}