"""
Django settings for pyazo project.

Generated by 'django-admin startproject' using Django 1.11.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import logging
import os
import structlog
import sys
from urllib.parse import urlparse

from sentry_sdk import init as sentry_init
from sentry_sdk.integrations.celery import CeleryIntegration
from sentry_sdk.integrations.django import DjangoIntegration

from pyazo import __version__
from pyazo.utils.config import CONFIG

LOGGER = logging.getLogger(__name__)


SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = CONFIG.y(
    "secret_key", "48e9z8tw=_z0e#m*x70&)u%cgo8#=16uzdze&i8q=*#**)@cp&"
)  # noqa Debug

DEBUG = CONFIG.y("debug")

# Also allow server's hostname and server's fqdn
ALLOWED_HOSTS = ["*"]

LOGIN_REDIRECT_URL = "index"
# Application definition
LOGIN_URL = "accounts-login"
LOGOUT_REDIRECT_URL = "accounts-login"
INTERNAL_IPS = ["127.0.0.1"]

# Redis settings
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{CONFIG.y('redis')}",
        "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient",},
    }
}
DJANGO_REDIS_IGNORE_EXCEPTIONS = True
DJANGO_REDIS_LOG_IGNORED_EXCEPTIONS = True
SESSION_CACHE_ALIAS = "default"

# Celery settings
# Add a 10 minute timeout to all Celery tasks.
CELERY_TASK_SOFT_TIME_LIMIT = 600
CELERY_BEAT_SCHEDULE = {}
CELERY_CREATE_MISSING_QUEUES = True
CELERY_TASK_DEFAULT_QUEUE = "pyazo"
CELERY_BROKER_URL = "redis://%s" % CONFIG.y("redis")
CELERY_RESULT_BACKEND = "redis://%s" % CONFIG.y("redis")
CELERY_IMPORTS = ("pyazo.root.tasks",)

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
]


# OIDC settings
if "OIDC_CLIENT_ID" in os.environ:
    OIDC_RP_CLIENT_ID = os.environ["OIDC_CLIENT_ID"]
    OIDC_RP_CLIENT_SECRET = os.environ["OIDC_CLIENT_SECRET"]
    AUTHENTICATION_BACKENDS += [
        "mozilla_django_oidc.auth.OIDCAuthenticationBackend",
    ]

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "mozilla_django_oidc",
    "pyazo.core.apps.PyazoCoreConfig",
    "pyazo.api.apps.PyazoAPIConfig",
    "raven.contrib.django.raven_compat",
    "rest_framework",
    "rest_framework_swagger",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "raven.contrib.django.raven_compat.middleware.SentryResponseErrorIdMiddleware",
]

ROOT_URLCONF = "pyazo.root.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "pyazo/templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

VERSION = __version__

WSGI_APPLICATION = "pyazo.root.wsgi.application"

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": CONFIG.y("postgresql.host"),
        "NAME": CONFIG.y("postgresql.name"),
        "USER": CONFIG.y("postgresql.user"),
        "PASSWORD": CONFIG.y("postgresql.password"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True
SITE_ID = 1

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = "/static/"

RAVEN_CONFIG = {
    "dsn": "https://dfcc6acbd9c543ea8d4c9dbf4ac9a8c0:5340ca78902841b5b"
    "3372ecce5d548a5@sentry.services.beryju.org/4",
    "release": VERSION,
    "environment": "production" if DEBUG is False else "development",
    "tags": {"site": CONFIG.y("external_url")},
}

ERROR_REPORT_ENABLED = CONFIG.y("error_report_enabled", False)
if not ERROR_REPORT_ENABLED:
    RAVEN_CONFIG["dsn"] = ""


structlog.configure_once(
    processors=[
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(),
        structlog.processors.StackInfoRenderer(),
        # structlog.processors.format_exc_info,
        structlog.stdlib.ProcessorFormatter.wrap_for_formatter,
    ],
    context_class=structlog.threadlocal.wrap_dict(dict),
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

LOG_PRE_CHAIN = [
    # Add the log level and a timestamp to the event_dict if the log entry
    # is not from structlog.
    structlog.stdlib.add_log_level,
    structlog.processors.TimeStamper(),
]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "plain": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processor": structlog.processors.JSONRenderer(sort_keys=True),
            "foreign_pre_chain": LOG_PRE_CHAIN,
        },
        "colored": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processor": structlog.dev.ConsoleRenderer(colors=DEBUG),
            "foreign_pre_chain": LOG_PRE_CHAIN,
        },
    },
    "handlers": {
        "console": {
            "level": DEBUG,
            "class": "logging.StreamHandler",
            "formatter": "colored" if DEBUG else "plain",
        },
    },
    "loggers": {},
}
_LOGGING_HANDLER_MAP = {
    "pyazo": "DEBUG",
    "django": "WARNING",
    "celery": "WARNING",
    "grpc": "DEBUG",
    "oauthlib": "DEBUG",
    "oauth2_provider": "DEBUG",
    "oidc_provider": "DEBUG",
}
for handler_name, level in _LOGGING_HANDLER_MAP.items():
    LOGGING["loggers"][handler_name] = {
        "handlers": ["console"],
        "level": level,
        "propagate": True,
    }


TEST = any("test" in arg for arg in sys.argv)
TEST_RUNNER = "xmlrunner.extra.djangotestrunner.XMLTestRunner"
TEST_OUTPUT_VERBOSE = 2

TEST_OUTPUT_FILE_NAME = "unittest.xml"

MEDIA_ROOT = os.path.join(BASE_DIR, "media/")
STATIC_ROOT = os.path.join(BASE_DIR, "static/")
THUMBNAIL_ROOT = os.path.join(BASE_DIR, "media/thumbnail/")

if TEST:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": True,
    }
    CELERY_TASK_ALWAYS_EAGER = True
    MEDIA_ROOT = os.path.join(BASE_DIR, "media_test/")
    THUMBNAIL_ROOT = os.path.join(BASE_DIR, "media_test/thumbnail/")

os.makedirs(MEDIA_ROOT, exist_ok=True)
os.makedirs(THUMBNAIL_ROOT, exist_ok=True)

if DEBUG is True:
    INSTALLED_APPS.append("debug_toolbar")
    MIDDLEWARE.append("debug_toolbar.middleware.DebugToolbarMiddleware")
